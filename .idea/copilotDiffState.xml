<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/DeleteUser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/DeleteUser.java" />
              <option name="originalContent" value="package com.ums.app.controller.admin;&#10;import com.google.gson.Gson;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;&#10;@WebServlet(name = &quot;DeleteStudentAndTeacher&quot;, urlPatterns = &quot;/api/deleteUser/*&quot;)&#10;public class DeleteUser extends BaseServlet {&#10;&#10;    private final Gson gson=new Gson();&#10;    private final AdminService adminService=new AdminService();&#10;&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.DELETE_USER)&#10;    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims) req.getAttribute(&quot;claims&quot;);&#10;        int uid=(int)claims.get(&quot;uid&quot;);&#10;&#10;        String pathInfo=req.getPathInfo();&#10;&#10;        if (pathInfo==null &amp;&amp; pathInfo.equals(&quot;/&quot;)){&#10;            JsonResponse.badRequest(resp,&quot;Please Provide Id in Url&quot;);&#10;            return;&#10;        }&#10;        int id;&#10;        try{&#10;             id=Integer.parseInt(pathInfo.substring(1));&#10;        } catch (NumberFormatException e) {&#10;            JsonResponse.badRequest(resp,&quot;Please Provide Valid Id In url&quot;);&#10;            return;&#10;        }&#10;        if (id==uid){&#10;            JsonResponse.forbidden(resp,&quot;You Can't Delete Your Own Account&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            boolean ok=adminService.deleteUser(id);&#10;            if (!ok){&#10;                JsonResponse.notFound(resp,&quot;No Such User Found&quot;);&#10;                return;&#10;            }&#10;            JsonResponse.ok(resp,&quot;Deleted Successfully&quot;);&#10;&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ums.app.controller.admin;&#10;import com.google.gson.Gson;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;&#10;@WebServlet(name = &quot;DeleteStudentAndTeacher&quot;, urlPatterns = &quot;/api/deleteUser/*&quot;)&#10;public class DeleteUser extends BaseServlet {&#10;&#10;    private final Gson gson=new Gson();&#10;    private final AdminService adminService=new AdminService();&#10;&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.DELETE_USER)&#10;    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims) req.getAttribute(&quot;claims&quot;);&#10;        int uid=(int)claims.get(&quot;uid&quot;);&#10;&#10;        String pathInfo=req.getPathInfo();&#10;&#10;        if (pathInfo==null &amp;&amp; pathInfo.equals(&quot;/&quot;)){&#10;            JsonResponse.badRequest(resp,&quot;Please Provide Id in Url&quot;);&#10;            return;&#10;        }&#10;        int id;&#10;        try{&#10;             id=Integer.parseInt(pathInfo.substring(1));&#10;        } catch (NumberFormatException e) {&#10;            JsonResponse.badRequest(resp,&quot;Please Provide Valid Id In url&quot;);&#10;            return;&#10;        }&#10;        if (id==uid){&#10;            JsonResponse.forbidden(resp,&quot;You Can't Delete Your Own Account&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            boolean ok=adminService.deleteUser(id);&#10;            if (!ok){&#10;                JsonResponse.notFound(resp,&quot;No Such User Found&quot;);&#10;                return;&#10;            }&#10;            JsonResponse.ok(resp,&quot;Deleted Successfully&quot;);&#10;&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/GetAllCourses.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/GetAllCourses.java" />
              <option name="originalContent" value="package com.ums.app.controller.admin;&#10;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Courses;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;@WebServlet(name = &quot;GetAllCourses&quot;, urlPatterns = &quot;/api/getAllCourses&quot;)&#10;public class GetAllCourses extends BaseServlet {&#10;&#10;    private final AdminService adminService=new AdminService();&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.GET_ALL_COURSES)&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims)req.getAttribute(&quot;claims&quot;);&#10;        int id=(int)claims.get(&quot;uid&quot;);&#10;        List&lt;Courses&gt; courses;&#10;        try {&#10;            courses = adminService.getAllCourses();&#10;            if (courses==null ||courses.isEmpty()){&#10;                JsonResponse.notFound(resp,&quot;Not Found Any Course&quot;);&#10;                return;&#10;            }else {&#10;                JsonResponse.ok(resp,courses);&#10;            }&#10;        } catch (SQLException e) {&#10;            JsonResponse.serverError(resp,&quot;Internal Server Error&quot;);&#10;        }&#10;&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ums.app.controller.admin;&#10;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Courses;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;@WebServlet(name = &quot;GetAllCourses&quot;, urlPatterns = &quot;/api/getAllCourses&quot;)&#10;public class GetAllCourses extends BaseServlet {&#10;&#10;    private final AdminService adminService=new AdminService();&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.GET_ALL_COURSES)&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims)req.getAttribute(&quot;claims&quot;);&#10;        int id=(int)claims.get(&quot;uid&quot;);&#10;        List&lt;Courses&gt; courses;&#10;        try {&#10;            courses = adminService.getAllCourses();&#10;            if (courses==null ||courses.isEmpty()){&#10;                JsonResponse.notFound(resp,&quot;Not Found Any Course&quot;);&#10;                return;&#10;            }else {&#10;                JsonResponse.ok(resp,courses);&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/GetAllUsers.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ums/app/controller/admin/GetAllUsers.java" />
              <option name="originalContent" value="package com.ums.app.controller.admin;&#10;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.model.User;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;@WebServlet(name = &quot;GetAllUsers&quot;, urlPatterns = &quot;/api/getAllUsers/*&quot;)&#10;public class GetAllUsers extends BaseServlet {&#10;&#10;    private final AdminService adminService=new AdminService();&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.GET_ALL_USERS)&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims)req.getAttribute(&quot;claims&quot;);&#10;        int id=(int)claims.get(&quot;uid&quot;);&#10;&#10;        String pathInfo=req.getPathInfo();&#10;        if (pathInfo == null || pathInfo.equals(&quot;/&quot;)){&#10;            JsonResponse.badRequest(resp,&quot;Please Provide role in url&quot;);&#10;            return;&#10;        }&#10;        String requestedRole=pathInfo.substring(1);&#10;        List&lt;User&gt; user= null;&#10;        try {&#10;            user = adminService.getAllUsers(requestedRole);&#10;        } catch (SQLException e) {&#10;            JsonResponse.serverError(resp,&quot;Internal Server Error&quot;);&#10;        }&#10;&#10;        if (user==null ||user.isEmpty()){&#10;            JsonResponse.notFound(resp,&quot;Not Found Any Student&quot;);&#10;            return;&#10;        }else {&#10;            JsonResponse.ok(resp,user);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ums.app.controller.admin;&#10;&#10;import com.ums.app.annotation.RequiresPermission;&#10;import com.ums.app.model.Permission;&#10;import com.ums.app.model.User;&#10;import com.ums.app.service.AdminService;&#10;import com.ums.app.util.JsonResponse;&#10;import io.jsonwebtoken.Claims;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;@WebServlet(name = &quot;GetAllUsers&quot;, urlPatterns = &quot;/api/getAllUsers/*&quot;)&#10;public class GetAllUsers extends BaseServlet {&#10;&#10;    private final AdminService adminService=new AdminService();&#10;&#10;    @Override&#10;    @RequiresPermission(Permission.GET_ALL_USERS)&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;&#10;        Claims claims=(Claims)req.getAttribute(&quot;claims&quot;);&#10;        int id=(int)claims.get(&quot;uid&quot;);&#10;&#10;        String pathInfo=req.getPathInfo();&#10;        if (pathInfo == null || pathInfo.equals(&quot;/&quot;)){&#10;            JsonResponse.badRequest(resp,&quot;Please Provide role in url&quot;);&#10;            return;&#10;        }&#10;        String requestedRole=pathInfo.substring(1);&#10;        List&lt;User&gt; user= null;&#10;        try {&#10;            user = adminService.getAllUsers(requestedRole);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;&#10;        if (user==null ||user.isEmpty()){&#10;            JsonResponse.notFound(resp,&quot;Not Found Any Student&quot;);&#10;            return;&#10;        }else {&#10;            JsonResponse.ok(resp,user);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>